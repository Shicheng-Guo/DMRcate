DataTrack(methRatios[,names(phen.col) %in% i], name=i, background.title=phen.col[i],
type="heatmap", showSampleNames=TRUE, ylim=c(0, 1), genome=genome,
gradient=c("blue", "white", "red")))
dt.group <- c(dt.group, list(DataTrack(methRatios, groups=names(phen.col), type="b",
aggregateGroups=TRUE, col=phen.col[sort(group)], ylim=c(0, 1), name="Group means")))
switch(genome,
hg19={tx=tx.hg19},
hg38={tx=tx.hg38},
mm10={tx=tx.mm10}
)
extras <- list(AnnotationTrack(dmrs.inplot, name="DMRs", showFeatureId=TRUE, col=NULL, fill="purple", id=dmrs.inplot$ID,
fontcolor="black"))
extras <- endoapply(extras, function(x) {
chromosome(x) <- as.character(seqnames(methRatios[dmrs]))
x
})
values(cpgs.ranges) <- NULL
basetracks <- list(IdeogramTrack(genome = "hg19", chromosome = as.character(seqnames(ranges.inplot))),
GenomeAxisTrack(),
GeneRegionTrack(subsetByOverlaps(tx, ranges.inplot), name = "Gene", showId=TRUE, geneSymbol=TRUE, symbol = subsetByOverlaps(tx, ranges.inplot)$gene_name, col=NULL, fill="lightblue", transcriptAnnotation = "symbol", shape="arrow"),
AnnotationTrack(cpgs.ranges, name="CpGs", fill="green", col=NULL, stacking="dense"))
plotTracks(c(basetracks, extras, dt.group), from=start(ranges.inplot), to=end(ranges.inplot), ...)
}
DMR.plot(ranges, 1, myBetas, phen.col = cols, genome = "hg19", samps=samps)
DMR.plot(ranges, 2, myBetas, phen.col = cols, genome = "hg19", samps=samps)
DMR.plot(ranges, 3, myBetas, phen.col = cols, genome = "hg19", samps=samps)
DMR.plot(ranges, 4, myBetas, phen.col = cols, genome = "hg19", samps=samps)
DMR.plot(ranges, 5, myBetas, phen.col = cols, genome = "hg19", samps=samps)
DMR.plot(ranges, 6, myBetas, phen.col = cols, genome = "hg19", samps=samps)
DMR.plot(ranges, 7, myBetas, phen.col = cols, genome = "hg19", samps=samps)
DMR.plot(ranges, 8, myBetas, phen.col = cols, genome = "hg19", samps=samps)
DMR.plot(ranges=results.ranges, dmr=1, CpGs=myBetas, phen.col=cols, genome="hg19", samps=samps)
data(dmrcatedata)
CpGs
groups <- c(Tumour="magenta", Normal="forestgreen")
groups
<
cols <- groups[as.character(type)]
cols
samps <- c(1:6, 38+(1:6))
DMR.plot(ranges=results.ranges, dmr=1, CpGs=myBetas, phen.col=cols, genome="hg19", samps=samps)
samps=c(7:12, 38+(7:12))
DMR.plot(ranges=results.ranges, dmr=1, CpGs=myBetas, phen.col=cols, genome="hg19", samps=samps)
DMR.plot(ranges=results.ranges, dmr=3, CpGs=myBetas, phen.col=cols, genome="hg19", samps=samps)
CpGs
detach("package:aaRon", unload = T)
CpGs
coverage <- as.data.frame(CpGs[,samples$cov])
coverage <- as.data.frame(CpGs)
head(as.data.frame(CpGs[,grep(".C$", mcols(CpGs))]))
head(as.data.frame(CpGs)
)
head(as.data.frame(CpGs)[,grep(".C$"), colnames(as.data.frame(CpGs))])
grep(".C$", colnames(as.data.frame(CpGs)))
head(as.data.frame(CpGs)[,grep(".C$", colnames(as.data.frame(CpGs)))]
)
head(as.data.frame(CpGs)[,grep(".C$", colnames(as.data.frame(CpGs)))])
coverage <- as.data.frame(CpGs)[,grep(".cov$", colnames(as.data.frame(CpGs)))]
meth <- as.data.frame(CpGs)[,grep(".C$", colnames(as.data.frame(CpGs)))]
head(meth)
head(coverage)
range(meth/coverage)
deparse(substitute(treat1))
ls
ls()
treat1 <- data.frame(chr=coverage$seqnames, pos=coverage$start,
N=coverage$Treatment1.cov, X=meth$Treatment1.C)
treat2 <- data.frame(chr=coverage$seqnames, pos=coverage$start,
N=coverage$Treatment2.cov, X=meth$Treatment2.C)
treat3 <- data.frame(chr=coverage$seqnames, pos=coverage$start,
N=coverage$Treatment3.cov, X=meth$Treatment3.C)
ctrl1 <- data.frame(chr=coverage$seqnames, pos=coverage$start,
N=coverage$Control1.cov, X=meth$Control1.C)
ctrl2 <- data.frame(chr=coverage$seqnames, pos=coverage$start,
N=coverage$Control2.cov, X=meth$Control2.C)
ctrl3 <- data.frame(chr=coverage$seqnames, pos=coverage$start,
N=coverage$Control3.cov, X=meth$Control3.C)
head(coverage)
as.data.frame(CpGs)
head(as.data.frame(CpGs))
meth <- as.data.frame(CpGs)[,c(1:2, grep(".C$", colnames(as.data.frame(CpGs))))]
coverage <- as.data.frame(CpGs)[,c(1:2, grep(".cov$", colnames(as.data.frame(CpGs))))]
head(meth)
head(coverage)
treat1 <- data.frame(chr=coverage$seqnames, pos=coverage$start,
N=coverage$Treatment1.cov, X=meth$Treatment1.C)
treat2 <- data.frame(chr=coverage$seqnames, pos=coverage$start,
N=coverage$Treatment2.cov, X=meth$Treatment2.C)
treat3 <- data.frame(chr=coverage$seqnames, pos=coverage$start,
N=coverage$Treatment3.cov, X=meth$Treatment3.C)
ctrl1 <- data.frame(chr=coverage$seqnames, pos=coverage$start,
N=coverage$Control1.cov, X=meth$Control1.C)
ctrl2 <- data.frame(chr=coverage$seqnames, pos=coverage$start,
N=coverage$Control2.cov, X=meth$Control2.C)
ctrl3 <- data.frame(chr=coverage$seqnames, pos=coverage$start,
N=coverage$Control3.cov, X=meth$Control3.C)
samples <- list(treat1, treat2, treat3, ctrl1, ctrl2, ctrl3)
names(samples)
head(samples[[1]])
lapply(samples, head)
head(meth)
sub(".*.", "", colnames(meth))
sub("\\.*.", "", colnames(meth))
sub("\\..*", "", colnames(meth))
sub("\\..*", "", colnames(meth))[-c(1:2)]
obj_bsseq <- makeBSseqData(list(treat1, treat2, treat3, ctrl1, ctrl2, ctrl3), sub("\\..*", "", colnames(meth))[-c(1:2)])
samples <- list(treat1, treat2, treat3, ctrl1, ctrl2, ctrl3)
sampnames <- sub("\\..*", "", colnames(meth))[-c(1:2)]
sampnames <- sub("\\..*", "", colnames(meth))[-c(1:2)]
sampnames
obj_bsseq <- makeBSseqData(samples, sampnames)
DSSres <- DMLtest(obj_bsseq, group1=sampnames[1:3], group2=sampnames[4:6], smoothing=FALSE)
system.time(DSSres <- DMLtest(obj_bsseq, group1=sampnames[1:3], group2=sampnames[4:6], smoothing=FALSE))
wgbsannot <- cpg.annotate("sequencing", DSSres)
head(wgbsannot)
cpg.annotate <- function (datatype=c("450K", "sequencing"), object,
annotation = c(array = "IlluminaHumanMethylation450k", annotation = "ilmn12.hg19"),
analysis.type = c("differential", "variability"), design, contrasts = FALSE,
cont.matrix = NULL, fdr=0.05, coef, ...)
{
if(datatype=="450K"){
stopifnot(is.matrix(object))
analysis.type <- match.arg(analysis.type)
switch(analysis.type, differential = {
stopifnot(is.matrix(design))
if (!contrasts) {
stopifnot(colnames(design)[1] == "(Intercept)")
} else {
stopifnot(!is.null(cont.matrix))
}
fit <- lmFit(object, design, ...)
if (contrasts) {
stopifnot(coef %in% colnames(cont.matrix))
fit <- contrasts.fit(fit, cont.matrix)
}
fit <- eBayes(fit)
tt <- topTable(fit, coef=coef, number = nrow(object))
nsig <- sum(tt$adj.P.Val < fdr)
if(nsig==0){message("Your contrast returned no individually significant probes. Set pcutoff manually in dmrcate() to return DMRs, but be warned there is an increased risk of Type I errors.")}
if(nsig >0 & nsig <= 100) {message(paste("Your contrast returned", nsig, "individually significant probes; a small but real effect. Consider manually setting the value of pcutoff to return more DMRs, but be warned that doing this increases the risk of Type I errors."))}
if(nsig > 100){message(paste("Your contrast returned", nsig, "individually significant probes. We recommend the default setting of pcutoff in dmrcate()."))}
betafit <- lmFit(ilogit2(object), design, ...)
if (contrasts) {
betafit <- contrasts.fit(betafit, cont.matrix)
}
betafit <- eBayes(betafit)
betatt <- topTable(betafit, coef=coef, number = nrow(object))
m <- match(rownames(tt), rownames(betatt))
tt$betafc <- betatt$logFC[m]
m <- match(rownames(tt), rownames(object))
object <- object[m, ]
RSobject <- RatioSet(object, annotation = annotation)
RSanno <- getAnnotation(RSobject)
stat <- tt$t
annotated <- data.frame(ID = rownames(object), stat = stat,
CHR = RSanno$chr, pos = RSanno$pos, betafc = tt$betafc, indfdr = tt$adj.P.Val)
}, variability = {
RSobject <- RatioSet(object, annotation = annotation)
RSanno <- getAnnotation(RSobject)
wholevar <- var(object)
weights <- apply(object, 1, var)
weights <- weights/mean(weights)
annotated <- data.frame(ID = rownames(object), stat = weights, CHR = RSanno$chr, pos = RSanno$pos,
betafc = rep(0, nrow(object)), indfdr = rep(0, nrow(object)))
})
annotated <- annotated[order(annotated$CHR, annotated$pos),]
class(annotated) <- "annot"
return(annotated)
}
if(datatype=="sequencing"){
if (!all(c("stat", "chr", "pos", "diff", "fdr") %in%
colnames(object)))
stop("Error: object does not contain all required columns, was it created by DSS::DMLtest()? Must contain colNames 'stat', 'chr', 'pos', 'diff' and 'fdr'.")
annotated <- data.frame(ID = rownames(object), stat = object$stat, CHR = object$chr, pos = object$pos,
betafc = object$diff, indfdr = object$fdr)
annotated <- annotated[order(annotated$CHR, annotated$pos),]
class(annotated) <- "annot"
} else {
message("Error: datatype must be one of '450K' or 'sequencing'")
}
return(annotated)
}
wgbsannot <- cpg.annotate("sequencing", DSSres)
head(wgbsannot)
wgbs.DMRs <- dmrcate(wgbsannot, lambda = 1000, C = 50, mc.cores = 1)
head(wgbs.DMRs$results)
dim(wgbs.DMRs$results)
wgbs.DMRs$results
sum(DSSres$fdr < 0.05)
sum(wgbs.DMRs$results$no.probes)
wgbs.ranges <- extractRanges(wgbs.DMRs, genome = "hg19")
wgbs.ranges
head(DSSres)
wgbs.ranges <- extractRanges(wgbs.DMRs, genome = "hg19")
sampnames
sub([0-9], "", sampnames)
sub("[0-9", "", sampnames)
sub("[0-9]", "", sampnames)
groups <- c(Treatment="darkorange", Control="blue")
groups[sub("[0-9]", "", sampnames)]
detectCores()
detectCores(all.tests = T)
groups <- c(Treatment="darkorange", Control="blue")
cols <- groups[sub("[0-9]", "", sampnames)]
DMR.plot(ranges=wgbs.ranges, dmr=1, CpGs=CpGs, phen.col=cols, genome="hg19")
ncol(CpGs)
DMR.plot <- function(ranges, dmr, CpGs, phen.col,
genome=c("hg19", "hg38", "mm10"), array.annotation=c(array="IlluminaHumanMethylation450k",
annotation="ilmn12.hg19"), samps=NULL, ...)
{
stopifnot(class(CpGs) %in% c("matrix", "GRanges"))
stopifnot(dmr %in% 1:length(ranges))
if(is.null(samps)){samps=1:length(phen.col)}
group <- unique(names(phen.col))
if(is.matrix(CpGs)){
RSobject <- RatioSet(CpGs, annotation=array.annotation)
RSanno <- getAnnotation(RSobject)
RSanno <- RSanno[order(RSanno$chr, RSanno$pos),]
CpGs <- CpGs[rownames(RSanno),]
colnames(CpGs) <- paste(colnames(CpGs), ".C", sep='')
cov <- matrix(1, nrow(CpGs), ncol(CpGs), dimnames = list(rownames(CpGs), sub(".C", ".cov", colnames(CpGs))))
cpgs.ranges <- GRanges(RSanno$chr, IRanges(RSanno$pos, RSanno$pos))
dummy <- matrix(0, nrow=nrow(CpGs), ncol=2*ncol(CpGs))
dummy[,seq(1, 2*ncol(CpGs), 2)] <- CpGs
dummy[,seq(2, 2*ncol(CpGs), 2)] <- cov
colnames(dummy)[seq(2, 2*ncol(CpGs), 2)] <- colnames(cov)
colnames(dummy)[seq(1, 2*ncol(CpGs), 2)] <- colnames(CpGs)
values(cpgs.ranges) <- dummy
} else {
if(!all(gsub(".*\\.", "", colnames(values(cpgs.ranges))) == rep(c("C", "cov"), ncol(CpGs)))){
stop("Error: Column names of values(ranges) are not in the correct format. Must be c('<sample1>.C', '<sample1>.cov', '<sample2>.C', '<sample2>.cov'...) and so on for all samples.")
}
}
ranges$ID <- paste0("DMR_", 1:length(ranges))
ranges.reduce <- reduce(ranges+5000)
dmrs.inplot <- ranges[ranges %over% ranges.reduce[subjectHits(findOverlaps(ranges[dmr], ranges.reduce))]]
ranges.inplot <- ranges.reduce[ranges.reduce %over% dmrs.inplot]
cpgs.ranges <- subsetByOverlaps(cpgs.ranges, ranges.inplot)
methRatios <- as.data.frame(values(cpgs.ranges)[,grep("C$", colnames(values(cpgs.ranges)))])/
as.data.frame(values(cpgs.ranges)[,grep("cov$", colnames(values(cpgs.ranges)))])
methRatios <- GRanges(cpgs.ranges, mcols=methRatios)
mcols(methRatios) <- mcols(methRatios)[samps]
names(mcols(methRatios)) <- gsub("mcols.", "", gsub("*.C", "", names(mcols(methRatios))))
phen.col <- phen.col[samps]
dt.group <- lapply(names(groups), function(i)
DataTrack(methRatios[,names(phen.col) %in% i], name=i, background.title=phen.col[i],
type="heatmap", showSampleNames=TRUE, ylim=c(0, 1), genome=genome,
gradient=c("blue", "white", "red")))
dt.group <- c(dt.group, list(DataTrack(methRatios, groups=names(phen.col), type="b",
aggregateGroups=TRUE, col=phen.col[sort(group)], ylim=c(0, 1), name="Group means")))
switch(genome,
hg19={tx=tx.hg19},
hg38={tx=tx.hg38},
mm10={tx=tx.mm10}
)
extras <- list(AnnotationTrack(dmrs.inplot, name="DMRs", showFeatureId=TRUE, col=NULL, fill="purple", id=dmrs.inplot$ID,
fontcolor="black"))
extras <- endoapply(extras, function(x) {
chromosome(x) <- as.character(seqnames(methRatios[dmrs]))
x
})
values(cpgs.ranges) <- NULL
basetracks <- list(IdeogramTrack(genome = "hg19", chromosome = as.character(seqnames(ranges.inplot))),
GenomeAxisTrack(),
GeneRegionTrack(subsetByOverlaps(tx, ranges.inplot), name = "Gene", showId=TRUE, geneSymbol=TRUE, symbol = subsetByOverlaps(tx, ranges.inplot)$gene_name, col=NULL, fill="lightblue", transcriptAnnotation = "symbol", shape="arrow"),
AnnotationTrack(cpgs.ranges, name="CpGs", fill="green", col=NULL, stacking="dense"))
plotTracks(c(basetracks, extras, dt.group), from=start(ranges.inplot), to=end(ranges.inplot), ...)
}
DMR.plot(ranges=wgbs.ranges, dmr=1, CpGs=CpGs, phen.col=cols, genome="hg19")
CpGs
DMR.plot <- function(ranges, dmr, CpGs, phen.col,
genome=c("hg19", "hg38", "mm10"), array.annotation=c(array="IlluminaHumanMethylation450k",
annotation="ilmn12.hg19"), samps=NULL, ...)
{
stopifnot(class(CpGs) %in% c("matrix", "GRanges"))
stopifnot(dmr %in% 1:length(ranges))
if(is.null(samps)){samps=1:length(phen.col)}
group <- unique(names(phen.col))
if(is.matrix(CpGs)){
RSobject <- RatioSet(CpGs, annotation=array.annotation)
RSanno <- getAnnotation(RSobject)
RSanno <- RSanno[order(RSanno$chr, RSanno$pos),]
CpGs <- CpGs[rownames(RSanno),]
colnames(CpGs) <- paste(colnames(CpGs), ".C", sep='')
cov <- matrix(1, nrow(CpGs), ncol(CpGs), dimnames = list(rownames(CpGs), sub(".C", ".cov", colnames(CpGs))))
cpgs.ranges <- GRanges(RSanno$chr, IRanges(RSanno$pos, RSanno$pos))
dummy <- matrix(0, nrow=nrow(CpGs), ncol=2*ncol(CpGs))
dummy[,seq(1, 2*ncol(CpGs), 2)] <- CpGs
dummy[,seq(2, 2*ncol(CpGs), 2)] <- cov
colnames(dummy)[seq(2, 2*ncol(CpGs), 2)] <- colnames(cov)
colnames(dummy)[seq(1, 2*ncol(CpGs), 2)] <- colnames(CpGs)
values(cpgs.ranges) <- dummy
} else {
if(!all(gsub(".*\\.", "", colnames(values(cpgs.ranges))) == rep(c("C", "cov"), length(phen.col)))){
stop("Error: Column names of values(ranges) are not in the correct format. Must be c('<sample1>.C', '<sample1>.cov', '<sample2>.C', '<sample2>.cov'...) and so on for all samples.")
}
}
ranges$ID <- paste0("DMR_", 1:length(ranges))
ranges.reduce <- reduce(ranges+5000)
dmrs.inplot <- ranges[ranges %over% ranges.reduce[subjectHits(findOverlaps(ranges[dmr], ranges.reduce))]]
ranges.inplot <- ranges.reduce[ranges.reduce %over% dmrs.inplot]
cpgs.ranges <- subsetByOverlaps(cpgs.ranges, ranges.inplot)
methRatios <- as.data.frame(values(cpgs.ranges)[,grep("C$", colnames(values(cpgs.ranges)))])/
as.data.frame(values(cpgs.ranges)[,grep("cov$", colnames(values(cpgs.ranges)))])
methRatios <- GRanges(cpgs.ranges, mcols=methRatios)
mcols(methRatios) <- mcols(methRatios)[samps]
names(mcols(methRatios)) <- gsub("mcols.", "", gsub("*.C", "", names(mcols(methRatios))))
phen.col <- phen.col[samps]
dt.group <- lapply(names(groups), function(i)
DataTrack(methRatios[,names(phen.col) %in% i], name=i, background.title=phen.col[i],
type="heatmap", showSampleNames=TRUE, ylim=c(0, 1), genome=genome,
gradient=c("blue", "white", "red")))
dt.group <- c(dt.group, list(DataTrack(methRatios, groups=names(phen.col), type="b",
aggregateGroups=TRUE, col=phen.col[sort(group)], ylim=c(0, 1), name="Group means")))
switch(genome,
hg19={tx=tx.hg19},
hg38={tx=tx.hg38},
mm10={tx=tx.mm10}
)
extras <- list(AnnotationTrack(dmrs.inplot, name="DMRs", showFeatureId=TRUE, col=NULL, fill="purple", id=dmrs.inplot$ID,
fontcolor="black"))
extras <- endoapply(extras, function(x) {
chromosome(x) <- as.character(seqnames(methRatios[dmrs]))
x
})
values(cpgs.ranges) <- NULL
basetracks <- list(IdeogramTrack(genome = "hg19", chromosome = as.character(seqnames(ranges.inplot))),
GenomeAxisTrack(),
GeneRegionTrack(subsetByOverlaps(tx, ranges.inplot), name = "Gene", showId=TRUE, geneSymbol=TRUE, symbol = subsetByOverlaps(tx, ranges.inplot)$gene_name, col=NULL, fill="lightblue", transcriptAnnotation = "symbol", shape="arrow"),
AnnotationTrack(cpgs.ranges, name="CpGs", fill="green", col=NULL, stacking="dense"))
plotTracks(c(basetracks, extras, dt.group), from=start(ranges.inplot), to=end(ranges.inplot), ...)
}
DMR.plot(ranges=wgbs.ranges, dmr=1, CpGs=CpGs, phen.col=cols, genome="hg19")
stopifnot(class(CpGs) %in% c("matrix", "GRanges"))
stopifnot(dmr %in% 1:length(ranges))
ranges=wgbs.ranges
CpGs
phen.col=col
phen.col
phen.col=cols
phen.col
dmr=1
samps=NULL
stopifnot(class(CpGs) %in% c("matrix", "GRanges"))
stopifnot(dmr %in% 1:length(ranges))
if(is.null(samps)){samps=1:length(phen.col)}
samps
group <- unique(names(phen.col))
group
!all(gsub(".*\\.", "", colnames(values(cpgs.ranges))) == rep(c("C", "cov"), length(phen.col)))
if(!all(gsub(".*\\.", "", colnames(values(CpGs))) == rep(c("C", "cov"), length(phen.col)))){
stop("Error: Column names of values(ranges) are not in the correct format. Must be c('<sample1>.C', '<sample1>.cov', '<sample2>.C', '<sample2>.cov'...) and so on for all samples.")
}
gsub(".*\\.", "", colnames(values(CpGs))
)
rep(c("C", "cov"), length(phen.col))
length(colnames(values(CpGs)))
length(colnames(values(CpGs)))/2 == length(phen.col)
ranges$ID <- paste0("DMR_", 1:length(ranges))
ranges
ranges.reduce <- reduce(ranges+5000)
dmrs.inplot <- ranges[ranges %over% ranges.reduce[subjectHits(findOverlaps(ranges[dmr], ranges.reduce))]]
dmrs.inplot
ranges.inplot <- ranges.reduce[ranges.reduce %over% dmrs.inplot]
ranges.inplot
cpgs.ranges
cpgs.ranges <- CpGs
cpgs.ranges
cpgs.ranges <- subsetByOverlaps(cpgs.ranges, ranges.inplot)
cpgs.ranges
methRatios <- as.data.frame(values(cpgs.ranges)[,grep("C$", colnames(values(cpgs.ranges)))])/
as.data.frame(values(cpgs.ranges)[,grep("cov$", colnames(values(cpgs.ranges)))])
methRatios
methRatios <- GRanges(cpgs.ranges, mcols=methRatios)
mcols(methRatios) <- mcols(methRatios)[samps]
names(mcols(methRatios)) <- gsub("mcols.", "", gsub("*.C", "", names(mcols(methRatios))))
phen.col <- phen.col[samps]
dt.group <- lapply(names(groups), function(i)
DataTrack(methRatios[,names(phen.col) %in% i], name=i, background.title=phen.col[i],
type="heatmap", showSampleNames=TRUE, ylim=c(0, 1), genome=genome,
gradient=c("blue", "white", "red")))
dt.group <- c(dt.group, list(DataTrack(methRatios, groups=names(phen.col), type="b",
aggregateGroups=TRUE, col=phen.col[sort(group)], ylim=c(0, 1), name="Group means")))
switch(genome,
hg19={tx=tx.hg19},
hg38={tx=tx.hg38},
mm10={tx=tx.mm10}
)
extras <- list(AnnotationTrack(dmrs.inplot, name="DMRs", showFeatureId=TRUE, col=NULL, fill="purple", id=dmrs.inplot$ID,
fontcolor="black"))
extras <- endoapply(extras, function(x) {
chromosome(x) <- as.character(seqnames(methRatios[dmrs]))
x
})
values(cpgs.ranges) <- NULL
basetracks <- list(IdeogramTrack(genome = "hg19", chromosome = as.character(seqnames(ranges.inplot))),
GenomeAxisTrack(),
GeneRegionTrack(subsetByOverlaps(tx, ranges.inplot), name = "Gene", showId=TRUE, geneSymbol=TRUE, symbol = subsetByOverlaps(tx, ranges.inplot)$gene_name, col=NULL, fill="lightblue", transcriptAnnotation = "symbol", shape="arrow"),
AnnotationTrack(cpgs.ranges, name="CpGs", fill="green", col=NULL, stacking="dense"))
plotTracks(c(basetracks, extras, dt.group), from=start(ranges.inplot), to=end(ranges.inplot))
DMR.plot(ranges=wgbs.ranges, dmr=1, CpGs=CpGs, phen.col=cols, genome="hg19")
phen.col
cpgs.ranges
CpGs
cpgs.ranges
subsetByOverlaps(cpgs.ranges, ranges.inplot)
cpgs.ranges <- CpGs
mcols(cpgs.ranges)
cpgs.ranges <- subsetByOverlaps(cpgs.ranges, ranges.inplot, mcols=mcols(cpgs.ranges))
cpgs.ranges
cpgs.ranges
subsetByOverlaps(cpgs.ranges, ranges.inplot)
DMR.plot <- function(ranges, dmr, CpGs, phen.col,
genome=c("hg19", "hg38", "mm10"), array.annotation=c(array="IlluminaHumanMethylation450k",
annotation="ilmn12.hg19"), samps=NULL, ...)
{
stopifnot(class(CpGs) %in% c("matrix", "GRanges"))
stopifnot(dmr %in% 1:length(ranges))
if(is.null(samps)){samps=1:length(phen.col)}
group <- unique(names(phen.col))
if(is.matrix(CpGs)){
RSobject <- RatioSet(CpGs, annotation=array.annotation)
RSanno <- getAnnotation(RSobject)
RSanno <- RSanno[order(RSanno$chr, RSanno$pos),]
CpGs <- CpGs[rownames(RSanno),]
colnames(CpGs) <- paste(colnames(CpGs), ".C", sep='')
cov <- matrix(1, nrow(CpGs), ncol(CpGs), dimnames = list(rownames(CpGs), sub(".C", ".cov", colnames(CpGs))))
cpgs.ranges <- GRanges(RSanno$chr, IRanges(RSanno$pos, RSanno$pos))
dummy <- matrix(0, nrow=nrow(CpGs), ncol=2*ncol(CpGs))
dummy[,seq(1, 2*ncol(CpGs), 2)] <- CpGs
dummy[,seq(2, 2*ncol(CpGs), 2)] <- cov
colnames(dummy)[seq(2, 2*ncol(CpGs), 2)] <- colnames(cov)
colnames(dummy)[seq(1, 2*ncol(CpGs), 2)] <- colnames(CpGs)
values(cpgs.ranges) <- dummy
} else {
stopifnot(length(colnames(values(CpGs)))/2 == length(phen.col))
if(!all(gsub(".*\\.", "", colnames(values(CpGs))) == rep(c("C", "cov"), length(phen.col)))){
stop("Error: Column names of values(ranges) might not be in the correct format. Must be c('<sample1>.C', '<sample1>.cov', '<sample2>.C', '<sample2>.cov'...) and so on for all samples.")
}
cpgs.ranges <- CpGs
}
ranges$ID <- paste0("DMR_", 1:length(ranges))
ranges.reduce <- reduce(ranges+5000)
dmrs.inplot <- ranges[ranges %over% ranges.reduce[subjectHits(findOverlaps(ranges[dmr], ranges.reduce))]]
ranges.inplot <- ranges.reduce[ranges.reduce %over% dmrs.inplot]
cpgs.ranges <- subsetByOverlaps(cpgs.ranges, ranges.inplot)
methRatios <- as.data.frame(values(cpgs.ranges)[,grep("C$", colnames(values(cpgs.ranges)))])/
as.data.frame(values(cpgs.ranges)[,grep("cov$", colnames(values(cpgs.ranges)))])
methRatios <- GRanges(cpgs.ranges, mcols=methRatios)
mcols(methRatios) <- mcols(methRatios)[samps]
names(mcols(methRatios)) <- gsub("mcols.", "", gsub("*.C", "", names(mcols(methRatios))))
phen.col <- phen.col[samps]
dt.group <- lapply(names(groups), function(i)
DataTrack(methRatios[,names(phen.col) %in% i], name=i, background.title=phen.col[i],
type="heatmap", showSampleNames=TRUE, ylim=c(0, 1), genome=genome,
gradient=c("blue", "white", "red")))
dt.group <- c(dt.group, list(DataTrack(methRatios, groups=names(phen.col), type="b",
aggregateGroups=TRUE, col=phen.col[sort(group)], ylim=c(0, 1), name="Group means")))
switch(genome,
hg19={tx=tx.hg19},
hg38={tx=tx.hg38},
mm10={tx=tx.mm10}
)
extras <- list(AnnotationTrack(dmrs.inplot, name="DMRs", showFeatureId=TRUE, col=NULL, fill="purple", id=dmrs.inplot$ID,
fontcolor="black"))
extras <- endoapply(extras, function(x) {
chromosome(x) <- as.character(seqnames(methRatios[dmrs]))
x
})
values(cpgs.ranges) <- NULL
basetracks <- list(IdeogramTrack(genome = "hg19", chromosome = as.character(seqnames(ranges.inplot))),
GenomeAxisTrack(),
GeneRegionTrack(subsetByOverlaps(tx, ranges.inplot), name = "Gene", showId=TRUE, geneSymbol=TRUE, symbol = subsetByOverlaps(tx, ranges.inplot)$gene_name, col=NULL, fill="lightblue", transcriptAnnotation = "symbol", shape="arrow"),
AnnotationTrack(cpgs.ranges, name="CpGs", fill="green", col=NULL, stacking="dense"))
plotTracks(c(basetracks, extras, dt.group), from=start(ranges.inplot), to=end(ranges.inplot), ...)
}
DMR.plot(ranges=wgbs.ranges, dmr=1, CpGs=CpGs, phen.col=cols, genome="hg19")
DMR.plot(ranges=wgbs.ranges, dmr=2, CpGs=CpGs, phen.col=cols, genome="hg19")
DMR.plot(ranges=wgbs.ranges, dmr=3, CpGs=CpGs, phen.col=cols, genome="hg19")
groups
wgbs.DMRs <- dmrcate(wgbsannot, lambda = 1000, C = 50, pcutoff = 0.05, mc.cores = 1)
wgbs.ranges <- extractRanges(wgbs.DMRs, genome = "hg19")
wgbs.ranges
wgbs.DMRs <- dmrcate(wgbsannot, lambda = 1000, C = 20, pcutoff = 0.05, mc.cores = 1)
wgbs.ranges <- extractRanges(wgbs.DMRs, genome = "hg19")
wgbs.ranges
wgbs.DMRs <- dmrcate(wgbsannot, lambda = 1000, C = 50, pcutoff = 0.05, mc.cores = 1)
wgbs.ranges <- extractRanges(wgbs.DMRs, genome = "hg19")
groups <- c(Treatment="darkorange", Control="blue")
cols <- groups[sub("[0-9]", "", sampnames)]
DMR.plot(ranges=wgbs.ranges, dmr=1, CpGs=CpGs, phen.col=cols, genome="hg19")
wgbs.DMRs <- dmrcate(wgbsannot, lambda = 1000, C = 2, pcutoff = 0.05, mc.cores = 1)
wgbs.ranges <- extractRanges(wgbs.DMRs, genome = "hg19")
wgbs.ranges
groups <- c(Treatment="darkorange", Control="blue")
cols <- groups[sub("[0-9]", "", sampnames)]
DMR.plot(ranges=wgbs.ranges, dmr=1, CpGs=CpGs, phen.col=cols, genome="hg19")
90/4
groups
phen.col
myannotation$indfdr
class(wgbsannot)
wgbs.ranges
cols
500/25
myannotation
dmrcoutput <- dmrcate(myannotation, lambda=1000)
results.ranges <- extractRanges(dmrcoutput, genome = "hg19")
length(phen.col)
length(cols)
cols
myBetas
